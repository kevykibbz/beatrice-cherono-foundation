// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



// ======================
// ENUMS
// ======================
enum Provider {
  credentials
  google
}

enum Role {
  user
  admin
}

enum PermissionAction {
  create
  read
  update
  delete
  manage
}

enum ActivityType {
  USER_LOGIN
  USER_LOGOUT
  TESTIMONIAL_ADD
  TESTIMONIAL_APPROVE
  TESTIMONIAL_DELETE
  TEAM_MEMBER_ADD
  GALLERY_UPLOAD
  GALLERY_DELETE
  GALLERY_UPDATE
  GALLERY_CREATE
  SITE_SETTINGS_CREATE
  SITE_SETTINGS_UPDATE
  CONTACT_DETAILS_CREATE
  CONTACT_DETAILS_UPDATE
}

// ======================
// MODELS
// ======================
model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String       @unique
  password     String
  provider     Provider     @default(credentials)
  role         Role         @default(user)
  image        String?
  permissions  Permission[] @relation(fields: [permissionIds], references: [id])
  permissionIds String[]    @db.ObjectId
  testimonials Testimonial[]
  activities   Activity[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("users")
  CarouselImage CarouselImage[]
}

model Permission {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  resource    String
  action      PermissionAction
  users       User[]     @relation(fields: [userIds], references: [id])
  userIds     String[]   @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("permissions")
}

model Testimonial {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  role        String
  testimonial String
  approved    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("testimonials")
}

model Activity {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @db.ObjectId
  action    ActivityType
  details   String
  metadata  Json?
  createdAt DateTime   @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt(sort: Desc)])
  @@map("activities")
}


model SiteSettings {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  siteName    String
  description String
  keywords    String[]
  author      String
  favicon     String?
  siteLogo    String?
  siteImages  String[]
  openGraph   SocialPlatform[] @relation("OpenGraphPlatforms")
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("site_settings")
}

model SocialPlatform {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  platform    String   // e.g. "facebook", "twitter", etc.
  url         String?
  cardImage   String?
  description String?
  images      String[]
  title       String?  // Added to match your Zod schema

  siteSettings SiteSettings? @relation("OpenGraphPlatforms", fields: [siteSettingsId], references: [id])
  siteSettingsId String? @db.ObjectId
}


model CarouselImage {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  imageUrl    String     @unique
  createdBy   User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("carousel_images")
}

model ContactDetails {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  contactEmail String
  phoneNumber  String
  address      String?
  city         String?
  country      String?
  postalCode   String?
  mapEmbedUrl  String?
  businessHours String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("contact_details")
}